#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <errno.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>

#include "bootsect.h"
#include "bpb.h"
#include "direntry.h"
#include "fat.h"
#include "dos.h"

typedef struct node {
	uint16_t cluster;
	struct node *next;
} File; 

int in_list(uint16_t cluster, File *head) {
    File *tmp = head;
    while (tmp != NULL) {
        if (cluster == tmp->cluster) {
		return 1;
        }
        tmp = tmp->next;
    }
    return 0;
}

int list_add(uint16_t cluster, File **head) {
    if (in_list(cluster, *head)) {//don't want to add if it's already in the list
        return 0;
    }
    File *newfile = (File*) malloc(sizeof(File));
    newfile->cluster = cluster;
    newfile->next = NULL;
    File *tmp = *head;
    if (tmp == NULL) {
        *head = newfile;
        return 0;
    }
    while (tmp->next != NULL) {
        tmp = tmp->next;
    }
    tmp->next = newfile;
    newfile->next = NULL;
}

void list_clear(File *list_head) {
    while (list_head != NULL) {
        File *tmp = list_head;
        list_head = list_head->next;
        free(tmp);
    }
}


void traverse_root(unint8_t *image_buf, struct bpb33* bpb) {
	uint16_t cluster = 0; //indicates root directory
	
	struct direntry *dirent = (struct direntry*)cluster_to_addr(cluster, image_buf, bpb);
	char buffer[MAXFILENAME]; 
	
	int i = 0;
	for ( ; i < bpb->bpbRootDirEnts; i++) { //go through every entry in root dir
		uint16_t followclust = get_dirent(dirent, buffer);
		
	}
}

void usage(char *progname) {
    fprintf(stderr, "usage: %s <imagename>\n", progname);
    exit(1);
}


int main(int argc, char** argv) {
    uint8_t *image_buf;
    int fd;
    struct bpb33* bpb;
    if (argc < 2) {
	usage(argv[0]);
    }

    image_buf = mmap_file(argv[1], &fd);
    bpb = check_bootsector(image_buf);

    // your code should start here...
    traverse_root(image_buf, bpb);





    unmmap_file(image_buf, &fd);
    return 0;
}
